From 1d90bb11837435c803388023ce33c25219db088b Mon Sep 17 00:00:00 2001
From: Athanasios Oikonomou <athoik@gmail.com>
Date: Wed, 2 Dec 2015 18:34:48 +0200
Subject: [PATCH] meta-dream: fix framerate and video size

Dreamboxes use different way of receiving events for framerate and video size in their dvbmediasink.

It seems that drivers do not send VIDEO_EVENT for VIDEO_EVENT_FRAME_RATE_CHANGED and VIDEO_EVENT_PROGRESSIVE_CHANGED.

So use the same way as in dreambox dvbmediasink for receiving events.

diff --git a/gstdvbvideosink.c b/gstdvbvideosink.c
index a262b77..e83c76e 100644
--- a/gstdvbvideosink.c
+++ b/gstdvbvideosink.c
@@ -91,6 +91,44 @@ typedef struct video_codec_data
 #define VIDEO_SET_CODEC_DATA _IOW('o', 80, video_codec_data_t)
 #endif
 
+static int readMpegProc(const char *str, int decoder)
+{
+	int val = -1;
+	char tmp[64];
+	sprintf(tmp, "/proc/stb/vmpeg/%d/%s", decoder, str);
+	FILE *f = fopen(tmp, "r");
+	if(f)
+	{
+		fscanf(f, "%x", &val);
+		fclose(f);
+	}
+	return val;
+}
+
+static int readApiSize(int fd, int *xres, int *yres, int *aspect)
+{
+	video_size_t size;
+	if(!ioctl(fd, VIDEO_GET_SIZE, &size))
+	{
+		*xres = size.w;
+		*yres = size.h;
+		*aspect = size.aspect_ratio == 0 ? 2 : 3;  // convert dvb api to etsi
+		return 0;
+	}
+	return -1;
+}
+
+static int readApiFrameRate(int fd, int *framerate)
+{
+	unsigned int frate;
+	if(!ioctl(fd, VIDEO_GET_FRAME_RATE, &frate))
+	{
+		*framerate = frate;
+		return 0;
+	}
+	return -1;
+}
+
 #ifdef PACK_UNPACKED_XVID_DIVX5_BITSTREAM
 struct bitstream
 {
@@ -1964,6 +2002,45 @@ static GstStateChangeReturn gst_dvbvideosink_change_state(GstElement *element, G
 		self->paused = TRUE;
 		if (self->fd >= 0)
 		{
+			GstStructure *s;
+			GstMessage *msg;
+			int aspect = -1, width = -1, height = -1, framerate = -1, progressive = -1;
+
+			progressive = readMpegProc("progressive", 0);
+
+			if(readApiSize(self->fd, &width, &height, &aspect) == -1)
+			{
+				aspect = readMpegProc("aspect", 0);
+				width = readMpegProc("xres", 0);
+				height = readMpegProc("yres", 0);
+			}
+			else
+			{
+				aspect = aspect == 0 ? 2 : 3; // dvb api to etsi
+			}
+
+			if(readApiFrameRate(self->fd, &framerate) == -1)
+			{
+				framerate = readMpegProc("framerate", 0);
+			}
+
+			s = gst_structure_new ("eventSizeAvail",
+				"aspect_ratio", G_TYPE_INT, aspect == 0 ? 2 : 3,
+				"width", G_TYPE_INT, width,
+				"height", G_TYPE_INT, height, NULL);
+			msg = gst_message_new_element (GST_OBJECT (element), s);
+			gst_element_post_message (GST_ELEMENT (element), msg);
+
+			s = gst_structure_new ("eventFrameRateAvail",
+				"frame_rate", G_TYPE_INT, framerate, NULL);
+			msg = gst_message_new_element (GST_OBJECT (element), s);
+			gst_element_post_message (GST_ELEMENT (element), msg);
+
+			s = gst_structure_new ("eventProgressiveAvail",
+				"progressive", G_TYPE_INT, progressive, NULL);
+			msg = gst_message_new_element (GST_OBJECT (element), s);
+			gst_element_post_message (GST_ELEMENT (element), msg);
+
 			ioctl(self->fd, VIDEO_SELECT_SOURCE, VIDEO_SOURCE_MEMORY);
 			ioctl(self->fd, VIDEO_FREEZE);
 		}
-- 
2.1.4

